import spacy
nlp = spacy.load('en_core_web_sm')

text = """
 Basics on Using TargetLink. General process steps. This topic shows a typical workflow for code generation with TargetLink and explains its individual components. The workflow is usually iterated multiple times. Comprehensive overview. For a comprehensive overview of all TargetLink processes and use cases, refer to Overview of Standard TargetLink Use Cases. TargetLink at a glance. TargetLink generates Production code (C code) from models created with MATLAB  /Simulink  /Stateflow . The C code generation options of TargetLink range from plain ANSI C code to optimized fixed-point or floating-point code for AUTOSAR platforms. Versatile code configuration options ensure that the generated production code is suitable for the target. The built-in simulation features in MIL simulation, SIL simulation, and PIL simulation simulation modes enable high code quality because each simulation step can be tested against the specification. TargetLink closes the gap between the specified model and the code implementation for the target. Production code generated by TargetLink is proven to be as efficient as handwritten code. Other factors also make TargetLink a useful tool: code readability, traceable model/code dependency, and the ability to configure the code generation to produce precisely the required code. Refer to Basics on Configuring the Code Generator for Production Code Generation. Demo models. You can use the provided demo models to become familiar with the operating principles of TargetLink. Refer to How to Open a Demo Model. Based on MATLAB/Simulink and Stateflow. MATLAB/Simulink and Stateflow provide the calculation and simulation engine that is used to simulate the TargetLink model. TargetLink is based on MATLAB/Simulink and uses MATLAB editors to generate the model and to simulate it. If you installed TargetLink and connected it to a supported MATLAB version in the dSPACE Installation Manager, a message similar to the following is displayed in the MATLAB Command Window after you start MATLAB: Refer to Working with dSPACE Installation Manager. Creating TargetLink models. TargetLink models are Simulink models where certain blocks carry additional data to specify production code settings. You can find all supported blocks in the TargetLink block library ( tllib ). A simple TargetLink model contains at least one TargetLink Subsystem block and exactly one MIL Handler block. You can create a model from scratch or prepare an existing Simulink model for code generation. Refer to: How to Create a Model from Scratch. How to Prepare Simulink Systems for Code Generation with TargetLink. Modeling with TargetLink blocks. In the TargetLink Subsystem block, you can implement a control algorithm by using blocks from the TargetLink block library (tllib). You can add TargetLink blocks to your model with one of the following methods: Typing the name of a TargetLink block directly in the Simulink Editor. Dragging a TargetLink block from the Simulink Library Browser. Using the add_block API command. Specifying block properties. TargetLink blocks provide additional data called Block properties. You can modify a block property via the block dialog or modify multiple block properties at once via the Property Manager. Refer to: How to Modify Block Properties via Block Dialogs. Modifying Multiple Properties at Once via the Property Manager. Globally specifying data in the TargetLink Data Dictionary. You can globally specify data with a fixed set of block properties via the TargetLink Data Dictionary. Managing data specifications globally helps you as follows: Keeping data consistent across development stages. Separating data from the control algorithm. Using the data in different models. Sharing the data with team members. Refer to: Basics on the TargetLink Data Dictionary. Managing Data Specifications in the Data Dictionary. Using TargetLink operation modes. TargetLink provides different operation modes. You can switch between the following operation modes: Modeling Only operation mode: not license-protected and used for designing a model. Full-Featured operation mode: license-protected and used for generating code. Refer to Overview of the TargetLink Operation Modes. Controlling TargetLink via the TargetLink Main Dialog. You can use the Main Dialog to access model data, control the production code generation, start a simulation, and open various TargetLink utilities and tools. You can open the Main Dialog via the TargetLink menu in the Simulink Editor or via the TargetLink Main Dialog block. Refer to TargetLink Main Dialog Block Functionality. Automating TargetLink tasks via the TargetLink API. You can automate tasks and quickly access commands via the TargetLink API. Refer to API Functions. Configuring the Code Generator. You can use Code Generator options to configure the Code Generator for production code generation. Refer to Basics on Configuring the Code Generator for Production Code Generation. Simulating models and code. TargetLink supports three simulation modes: Model-in-the-loop simulation (MIL). Software-in-the-loop simulation (SIL). Processor-in-the-loop simulation (PIL). You can use the different simulation modes to gradually improve your model and to achieve production code quality. Refer to Basics on Simulation Modes and Preconditions. Model-in-the-loop (MIL) simulation mode. The MIL simulation mode is used for controller design and parameterization, for behavior validity checks and test purposes, to detect overflows and to serve as a reference for the production code simulations. It is the most accurate simulation mode, because the transfer behavior of the TargetLink subsystem is computed using TargetLink blocks that have the same transfer behavior as the corresponding Simulink blocks. All arithmetic calculations are done with the Simulink data type, independently of the production code data types set in the TargetLink block dialogs. Because the MIL signal represents the real physical value, it is generally recommended to continue using the double data type. Refer to How to Simulate in MIL Simulation Mode (Reference Simulation). Software-in-the-loop (SIL) simulation mode. The SIL simulation mode is used to simulate the model using the generated production code and to investigate fixed-point arithmetic effects like quantization errors or saturation. The numerical effects that occur on the development PC are almost the same as on the target microprocessor. Refer to How to Simulate in SIL Simulation Mode. Processor-in-the-loop (PIL) simulation mode. The PIL simulation mode is used to verify simulation results from the MIL simulation and SIL simulation modes by executing the code on a Physical evaluation board (physical EVB) or Virtual evaluation board (virtual EVB) evaluation board (EVB). Thus, you can perform simulations under realistic operating conditions and investigate errors caused by the target compiler or even by the target processor. In addition, you can perform final verifications of the generated code can be performed with regard to execution time (physical EVB only) and stack usage during simulation. Refer to How to Simulate in PIL Simulation Mode. Generating documentation. In the final phase of developing production code with TargetLink, you might want to document the generated code and the Simulink model, including Stateflow charts, from which the production code has been generated. Refer to How to Generate the Documentation. TargetLink provides several scripts and mechanisms to customize the documentation generation. Refer to Basics on Customizing the Generated Documentation. Export and integration. You can export the source files generated by TargetLink and integrate them in your own ECU C modules. Refer to: How to Export Generated Files from the TargetLink Environment. How to Embed TargetLink Code into Your Own C Modules. In addition, you can import and export various file formats via the TargetLink Data Dictionary. Refer to Basics on Importing and Exporting Files.
 """
text2 =  """
 This topic shows a typical workflow for code generation with TargetLink and explains its individual components. The workflow is usually iterated multiple times. 
 For a comprehensive overview of all TargetLink processes and use cases, refer to Overview of Standard TargetLink Use Cases. 
 TargetLink generates Production code (C code) from models created with MATLAB  /Simulink  /Stateflow . The C code generation options of TargetLink range from plain ANSI C code to optimized 
 fixed-point or floating-point code for AUTOSAR platforms. Versatile code configuration options ensure that the generated production code is suitable for the target. 
 The built-in simulation features in MIL simulation, SIL simulation, and PIL simulation simulation modes enable high code quality because each simulation step can be tested against the specification. 
 TargetLink closes the gap between the specified model and the code implementation for the target. Production code generated by TargetLink is proven to be as efficient as handwritten code.
 Other factors also make TargetLink a useful tool: code readability, traceable model/code dependency, and the ability to configure the code generation to produce precisely the required code. 
 Refer to Basics on Configuring the Code Generator for Production Code Generation. You can use the provided demo models to become familiar with the operating principles of TargetLink. 
 Refer to How to Open a Demo Model. MATLAB/Simulink and Stateflow provide the calculation and simulation engine that is used to simulate the TargetLink model.
  TargetLink is based on MATLAB/Simulink and uses MATLAB editors to generate the model and to simulate it. If you installed TargetLink and connected it to a supported MATLAB version in the dSPACE Installation 
  Manager, a message similar to the following is displayed in the MATLAB Command Window after you start MATLAB: Refer to Working with dSPACE Installation Manager. 
  TargetLink models are Simulink models where certain blocks carry additional data to specify production code settings. You can find all supported blocks in the TargetLink block library ( tllib ). 
  A simple TargetLink model contains at least one TargetLink Subsystem block and exactly one MIL Handler block. You can create a model from scratch or prepare an existing Simulink model for code generation. 
  Refer to: How to Create a Model from Scratch. How to Prepare Simulink Systems for Code Generation with TargetLink. In the TargetLink Subsystem block, you can implement a control algorithm by using blocks 
  from the TargetLink block library (tllib). You can add TargetLink blocks to your model with one of the following methods: Typing the name of a TargetLink block directly in the Simulink Editor. 
  Dragging a TargetLink block from the Simulink Library Browser. Using the add_block API command. 
  TargetLink blocks provide additional data called Block properties. You can modify a block property via the block dialog or modify multiple block properties at once via the Property Manager. 
  Refer to: How to Modify Block Properties via Block Dialogs.  You can globally specify data with a fixed set of block properties via the TargetLink Data Dictionary. 
  Managing data specifications globally helps you as follows: Keeping data consistent across development stages. Separating data from the control algorithm. Using the data in different models. 
  Sharing the data with team members. Refer to: Basics on the TargetLink Data Dictionary.
  TargetLink provides different operation modes. You can switch between the following operation modes: Modeling Only operation mode: not license-protected and used for designing a model. 
  Full-Featured operation mode: license-protected and used for generating code. Refer to Overview of the TargetLink Operation Modes. 
  You can use the Main Dialog to access model data, control the production code generation, start a simulation, and open various TargetLink utilities and tools. 
  You can open the Main Dialog via the TargetLink menu in the Simulink Editor or via the TargetLink Main Dialog block. Refer to TargetLink Main Dialog Block Functionality. 
  You can automate tasks and quickly access commands via the TargetLink API. Refer to API Functions. You can use Code Generator options to configure the Code Generator for production code generation. 
  Refer to Basics on Configuring the Code Generator for Production Code Generation. TargetLink supports three simulation modes: Model-in-the-loop simulation (MIL). 
  Software-in-the-loop simulation (SIL). Processor-in-the-loop simulation (PIL). You can use the different simulation modes to gradually improve your model and to achieve production code quality. 
  Refer to Basics on Simulation Modes and Preconditions. The MIL simulation mode is used for controller design and parameterization, for behavior validity checks and test purposes, to detect overflows and 
  to serve as a reference for the production code simulations. It is the most accurate simulation mode, because the transfer behavior of the TargetLink subsystem is computed using TargetLink blocks 
  that have the same transfer behavior as the corresponding Simulink blocks. All arithmetic calculations are done with the Simulink data type, independently of the production code data types set in the 
  TargetLink block dialogs. Because the MIL signal represents the real physical value, it is generally recommended to continue using the double data type. 
  Refer to How to Simulate in MIL Simulation Mode (Reference Simulation). The SIL simulation mode is used to simulate the model using the generated production code 
  and to investigate fixed-point arithmetic effects like quantization errors or saturation. The numerical effects that occur on the development PC are almost the same as on the target microprocessor.
   Refer to How to Simulate in SIL Simulation Mode. The PIL simulation mode is used to verify simulation results from the MIL simulation and SIL simulation modes by executing the code on a 
   Physical evaluation board (physical EVB) or Virtual evaluation board (virtual EVB). Thus, you can perform simulations under realistic operating conditions and investigate errors 
   caused by the target compiler or even by the target processor. In addition, you can perform final verifications of the generated code can be performed with regard to execution time (physical EVB only) 
   and stack usage during simulation. Refer to How to Simulate in PIL Simulation Mode. In the final phase of developing production code with TargetLink, you might want to document the generated code 
   and the Simulink model, including Stateflow charts, from which the production code has been generated. Refer to How to Generate the Documentation. 
   TargetLink provides several scripts and mechanisms to customize the documentation generation. Refer to Basics on Customizing the Generated Documentation. 
   You can export the source files generated by TargetLink and integrate them in your own ECU C modules. Refer to: How to Export Generated Files from the TargetLink Environment. 
   How to Embed TargetLink Code into Your Own C Modules. In addition, you can import and export various file formats via the TargetLink Data Dictionary. Refer to Basics on Importing and Exporting Files.
 """
#for chunk in nlp(text).noun_chunks:
#    print(chunk)


doc = nlp(text2)
for token in doc.ents:
    print(token.text, token.label_)